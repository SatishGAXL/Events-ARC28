#pragma version 10

// This TEAL was generated by TEALScript v0.93.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts\Events.algo.ts:11
	// this.CalledMethodEvent.log({ sender: this.txn.sender, msg: 'Created app' })
	byte 0xbcc1a0f3 // CalledMethodEvent(address,string)
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	txn Sender
	callsub *process_static_tuple_element
	byte 0x000b4372656174656420617070
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	concat
	log
	retsub

// first_method()void
*abi_route_first_method:
	// execute first_method()void
	callsub first_method
	int 1
	return

// first_method(): void
first_method:
	proto 0 0

	// contracts\Events.algo.ts:15
	// this.CalledMethodEvent.log({ sender: this.txn.sender, msg: 'Called First Method' })
	byte 0xbcc1a0f3 // CalledMethodEvent(address,string)
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	txn Sender
	callsub *process_static_tuple_element
	byte 0x001343616c6c6564204669727374204d6574686f64
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	concat
	log
	retsub

// second_method()void
*abi_route_second_method:
	// execute second_method()void
	callsub second_method
	int 1
	return

// second_method(): void
second_method:
	proto 0 0

	// contracts\Events.algo.ts:19
	// this.CalledMethodEvent.log({ sender: this.txn.sender, msg: 'Called Second Method' })
	byte 0xbcc1a0f3 // CalledMethodEvent(address,string)
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	txn Sender
	callsub *process_static_tuple_element
	byte 0x001443616c6c6564205365636f6e64204d6574686f64
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	concat
	log
	retsub

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "first_method()void"
	method "second_method()void"
	txna ApplicationArgs 0
	match *abi_route_first_method *abi_route_second_method

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub